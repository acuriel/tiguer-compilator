//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g 2017-04-13 21:15:04

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019

using System;

using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace Tiger
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class tigerLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int ACCESS_LVALUE=4;
	public const int ALIAS_DECL_NODE=5;
	public const int AND=6;
	public const int ARRAY=7;
	public const int ARRAY_CREATION_NODE=8;
	public const int ARRAY_OF_DECL_NODE=9;
	public const int ASCII_CHAR=10;
	public const int ASCII_CODE=11;
	public const int ASSIGN=12;
	public const int BREAK=13;
	public const int COLON=14;
	public const int COMMA=15;
	public const int COMMENT=16;
	public const int DECLARATION_LIST_NODE=17;
	public const int DIFFERENT=18;
	public const int DIGIT=19;
	public const int DIV=20;
	public const int DO=21;
	public const int DOT=22;
	public const int ELSE=23;
	public const int END=24;
	public const int EQUAL=25;
	public const int EXPR_LIST_NODE=26;
	public const int EXPR_SEQ_LET_NODE=27;
	public const int EXPR_SEQ_NODE=28;
	public const int FIELD_DEF_NODE=29;
	public const int FIELD_DEF_SEQ_NODE=30;
	public const int FIELD_LIST_NODE=31;
	public const int FIELD_NODE=32;
	public const int FOR=33;
	public const int FOR_NODE=34;
	public const int FUNCTION=35;
	public const int FUNCTION_CALL_NODE=36;
	public const int FUNCTION_DECLARATION_BLOCK_NODE=37;
	public const int FUNCTION_DEC_NODE=38;
	public const int GREATER_EQUAL_THAN=39;
	public const int GREATER_THAN=40;
	public const int ID=41;
	public const int IF=42;
	public const int IF_THEN_ELSE_NODE=43;
	public const int IF_THEN_NODE=44;
	public const int IN=45;
	public const int INDEXER=46;
	public const int INT=47;
	public const int LEFT_BRACKETS=48;
	public const int LEFT_CURLY_BRACKETS=49;
	public const int LEFT_PARENTHESIS=50;
	public const int LESS_EQUAL_THAN=51;
	public const int LESS_THAN=52;
	public const int LET=53;
	public const int LETTER=54;
	public const int LET_NODE=55;
	public const int LVALUE_STEPS=56;
	public const int MINUS=57;
	public const int MULT=58;
	public const int NEGATIVE_NODE=59;
	public const int NIL=60;
	public const int OF=61;
	public const int OR=62;
	public const int PLUS=63;
	public const int PROCEDURE_DEC_NODE=64;
	public const int PROGRAM_NODE=65;
	public const int QUOTES=66;
	public const int RECORD_CREATION_NODE=67;
	public const int RECORD_DECL_NODE=68;
	public const int RIGHT_BRACKETS=69;
	public const int RIGHT_CURLY_BRACKETS=70;
	public const int RIGHT_PARENTHESIS=71;
	public const int SCAPE=72;
	public const int SEMICOLON=73;
	public const int STRING=74;
	public const int TEST=75;
	public const int THEN=76;
	public const int TO=77;
	public const int TYPE=78;
	public const int TYPE_DECLARATION_BLOCK_NODE=79;
	public const int VAR=80;
	public const int VARIABLE_DECLARATION_BLOCK_NODE=81;
	public const int VAR_DEC_NODE=82;
	public const int VAR_TYPE_ID_DEC_NODE=83;
	public const int WHILE=84;
	public const int WHILE_NODE=85;
	public const int WHITE_SPACES=86;
	public const int WS=87;

		public override void ReportError(RecognitionException exc)
		{
			/* Abort on first error. */
	      		throw new ParsingException(GetErrorMessage(exc, TokenNames), exc);
		}


    // delegates
    // delegators

	public tigerLexer()
	{
		OnCreated();
	}

	public tigerLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public tigerLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 1);
		TraceIn("AND", 1);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:18:5: ( '&' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:18:7: '&'
			{
			DebugLocation(18, 7);
			Match('&'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 1);
			LeaveRule("AND", 1);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_ARRAY();
	partial void LeaveRule_ARRAY();

	// $ANTLR start "ARRAY"
	[GrammarRule("ARRAY")]
	private void mARRAY()
	{
		EnterRule_ARRAY();
		EnterRule("ARRAY", 2);
		TraceIn("ARRAY", 2);
		try
		{
			int _type = ARRAY;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:19:7: ( 'array' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:19:9: 'array'
			{
			DebugLocation(19, 9);
			Match("array"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ARRAY", 2);
			LeaveRule("ARRAY", 2);
			LeaveRule_ARRAY();
		}
	}
	// $ANTLR end "ARRAY"

	partial void EnterRule_ASSIGN();
	partial void LeaveRule_ASSIGN();

	// $ANTLR start "ASSIGN"
	[GrammarRule("ASSIGN")]
	private void mASSIGN()
	{
		EnterRule_ASSIGN();
		EnterRule("ASSIGN", 3);
		TraceIn("ASSIGN", 3);
		try
		{
			int _type = ASSIGN;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:20:8: ( ':=' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:20:10: ':='
			{
			DebugLocation(20, 10);
			Match(":="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN", 3);
			LeaveRule("ASSIGN", 3);
			LeaveRule_ASSIGN();
		}
	}
	// $ANTLR end "ASSIGN"

	partial void EnterRule_BREAK();
	partial void LeaveRule_BREAK();

	// $ANTLR start "BREAK"
	[GrammarRule("BREAK")]
	private void mBREAK()
	{
		EnterRule_BREAK();
		EnterRule("BREAK", 4);
		TraceIn("BREAK", 4);
		try
		{
			int _type = BREAK;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:21:7: ( 'break' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:21:9: 'break'
			{
			DebugLocation(21, 9);
			Match("break"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BREAK", 4);
			LeaveRule("BREAK", 4);
			LeaveRule_BREAK();
		}
	}
	// $ANTLR end "BREAK"

	partial void EnterRule_COLON();
	partial void LeaveRule_COLON();

	// $ANTLR start "COLON"
	[GrammarRule("COLON")]
	private void mCOLON()
	{
		EnterRule_COLON();
		EnterRule("COLON", 5);
		TraceIn("COLON", 5);
		try
		{
			int _type = COLON;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:22:7: ( ':' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:22:9: ':'
			{
			DebugLocation(22, 9);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COLON", 5);
			LeaveRule("COLON", 5);
			LeaveRule_COLON();
		}
	}
	// $ANTLR end "COLON"

	partial void EnterRule_COMMA();
	partial void LeaveRule_COMMA();

	// $ANTLR start "COMMA"
	[GrammarRule("COMMA")]
	private void mCOMMA()
	{
		EnterRule_COMMA();
		EnterRule("COMMA", 6);
		TraceIn("COMMA", 6);
		try
		{
			int _type = COMMA;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:23:7: ( ',' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:23:9: ','
			{
			DebugLocation(23, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMA", 6);
			LeaveRule("COMMA", 6);
			LeaveRule_COMMA();
		}
	}
	// $ANTLR end "COMMA"

	partial void EnterRule_DIFFERENT();
	partial void LeaveRule_DIFFERENT();

	// $ANTLR start "DIFFERENT"
	[GrammarRule("DIFFERENT")]
	private void mDIFFERENT()
	{
		EnterRule_DIFFERENT();
		EnterRule("DIFFERENT", 7);
		TraceIn("DIFFERENT", 7);
		try
		{
			int _type = DIFFERENT;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:24:11: ( '<>' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:24:13: '<>'
			{
			DebugLocation(24, 13);
			Match("<>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIFFERENT", 7);
			LeaveRule("DIFFERENT", 7);
			LeaveRule_DIFFERENT();
		}
	}
	// $ANTLR end "DIFFERENT"

	partial void EnterRule_DIV();
	partial void LeaveRule_DIV();

	// $ANTLR start "DIV"
	[GrammarRule("DIV")]
	private void mDIV()
	{
		EnterRule_DIV();
		EnterRule("DIV", 8);
		TraceIn("DIV", 8);
		try
		{
			int _type = DIV;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:25:5: ( '/' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:25:7: '/'
			{
			DebugLocation(25, 7);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIV", 8);
			LeaveRule("DIV", 8);
			LeaveRule_DIV();
		}
	}
	// $ANTLR end "DIV"

	partial void EnterRule_DO();
	partial void LeaveRule_DO();

	// $ANTLR start "DO"
	[GrammarRule("DO")]
	private void mDO()
	{
		EnterRule_DO();
		EnterRule("DO", 9);
		TraceIn("DO", 9);
		try
		{
			int _type = DO;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:26:4: ( 'do' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:26:6: 'do'
			{
			DebugLocation(26, 6);
			Match("do"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DO", 9);
			LeaveRule("DO", 9);
			LeaveRule_DO();
		}
	}
	// $ANTLR end "DO"

	partial void EnterRule_DOT();
	partial void LeaveRule_DOT();

	// $ANTLR start "DOT"
	[GrammarRule("DOT")]
	private void mDOT()
	{
		EnterRule_DOT();
		EnterRule("DOT", 10);
		TraceIn("DOT", 10);
		try
		{
			int _type = DOT;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:27:5: ( '.' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:27:7: '.'
			{
			DebugLocation(27, 7);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOT", 10);
			LeaveRule("DOT", 10);
			LeaveRule_DOT();
		}
	}
	// $ANTLR end "DOT"

	partial void EnterRule_ELSE();
	partial void LeaveRule_ELSE();

	// $ANTLR start "ELSE"
	[GrammarRule("ELSE")]
	private void mELSE()
	{
		EnterRule_ELSE();
		EnterRule("ELSE", 11);
		TraceIn("ELSE", 11);
		try
		{
			int _type = ELSE;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:28:6: ( 'else' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:28:8: 'else'
			{
			DebugLocation(28, 8);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ELSE", 11);
			LeaveRule("ELSE", 11);
			LeaveRule_ELSE();
		}
	}
	// $ANTLR end "ELSE"

	partial void EnterRule_END();
	partial void LeaveRule_END();

	// $ANTLR start "END"
	[GrammarRule("END")]
	private void mEND()
	{
		EnterRule_END();
		EnterRule("END", 12);
		TraceIn("END", 12);
		try
		{
			int _type = END;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:29:5: ( 'end' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:29:7: 'end'
			{
			DebugLocation(29, 7);
			Match("end"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("END", 12);
			LeaveRule("END", 12);
			LeaveRule_END();
		}
	}
	// $ANTLR end "END"

	partial void EnterRule_EQUAL();
	partial void LeaveRule_EQUAL();

	// $ANTLR start "EQUAL"
	[GrammarRule("EQUAL")]
	private void mEQUAL()
	{
		EnterRule_EQUAL();
		EnterRule("EQUAL", 13);
		TraceIn("EQUAL", 13);
		try
		{
			int _type = EQUAL;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:30:7: ( '=' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:30:9: '='
			{
			DebugLocation(30, 9);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQUAL", 13);
			LeaveRule("EQUAL", 13);
			LeaveRule_EQUAL();
		}
	}
	// $ANTLR end "EQUAL"

	partial void EnterRule_FOR();
	partial void LeaveRule_FOR();

	// $ANTLR start "FOR"
	[GrammarRule("FOR")]
	private void mFOR()
	{
		EnterRule_FOR();
		EnterRule("FOR", 14);
		TraceIn("FOR", 14);
		try
		{
			int _type = FOR;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:31:5: ( 'for' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:31:7: 'for'
			{
			DebugLocation(31, 7);
			Match("for"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FOR", 14);
			LeaveRule("FOR", 14);
			LeaveRule_FOR();
		}
	}
	// $ANTLR end "FOR"

	partial void EnterRule_FUNCTION();
	partial void LeaveRule_FUNCTION();

	// $ANTLR start "FUNCTION"
	[GrammarRule("FUNCTION")]
	private void mFUNCTION()
	{
		EnterRule_FUNCTION();
		EnterRule("FUNCTION", 15);
		TraceIn("FUNCTION", 15);
		try
		{
			int _type = FUNCTION;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:32:10: ( 'function' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:32:12: 'function'
			{
			DebugLocation(32, 12);
			Match("function"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FUNCTION", 15);
			LeaveRule("FUNCTION", 15);
			LeaveRule_FUNCTION();
		}
	}
	// $ANTLR end "FUNCTION"

	partial void EnterRule_GREATER_EQUAL_THAN();
	partial void LeaveRule_GREATER_EQUAL_THAN();

	// $ANTLR start "GREATER_EQUAL_THAN"
	[GrammarRule("GREATER_EQUAL_THAN")]
	private void mGREATER_EQUAL_THAN()
	{
		EnterRule_GREATER_EQUAL_THAN();
		EnterRule("GREATER_EQUAL_THAN", 16);
		TraceIn("GREATER_EQUAL_THAN", 16);
		try
		{
			int _type = GREATER_EQUAL_THAN;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:33:20: ( '>=' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:33:22: '>='
			{
			DebugLocation(33, 22);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GREATER_EQUAL_THAN", 16);
			LeaveRule("GREATER_EQUAL_THAN", 16);
			LeaveRule_GREATER_EQUAL_THAN();
		}
	}
	// $ANTLR end "GREATER_EQUAL_THAN"

	partial void EnterRule_GREATER_THAN();
	partial void LeaveRule_GREATER_THAN();

	// $ANTLR start "GREATER_THAN"
	[GrammarRule("GREATER_THAN")]
	private void mGREATER_THAN()
	{
		EnterRule_GREATER_THAN();
		EnterRule("GREATER_THAN", 17);
		TraceIn("GREATER_THAN", 17);
		try
		{
			int _type = GREATER_THAN;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:34:14: ( '>' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:34:16: '>'
			{
			DebugLocation(34, 16);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GREATER_THAN", 17);
			LeaveRule("GREATER_THAN", 17);
			LeaveRule_GREATER_THAN();
		}
	}
	// $ANTLR end "GREATER_THAN"

	partial void EnterRule_IF();
	partial void LeaveRule_IF();

	// $ANTLR start "IF"
	[GrammarRule("IF")]
	private void mIF()
	{
		EnterRule_IF();
		EnterRule("IF", 18);
		TraceIn("IF", 18);
		try
		{
			int _type = IF;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:35:4: ( 'if' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:35:6: 'if'
			{
			DebugLocation(35, 6);
			Match("if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IF", 18);
			LeaveRule("IF", 18);
			LeaveRule_IF();
		}
	}
	// $ANTLR end "IF"

	partial void EnterRule_IN();
	partial void LeaveRule_IN();

	// $ANTLR start "IN"
	[GrammarRule("IN")]
	private void mIN()
	{
		EnterRule_IN();
		EnterRule("IN", 19);
		TraceIn("IN", 19);
		try
		{
			int _type = IN;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:36:4: ( 'in' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:36:6: 'in'
			{
			DebugLocation(36, 6);
			Match("in"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IN", 19);
			LeaveRule("IN", 19);
			LeaveRule_IN();
		}
	}
	// $ANTLR end "IN"

	partial void EnterRule_LEFT_BRACKETS();
	partial void LeaveRule_LEFT_BRACKETS();

	// $ANTLR start "LEFT_BRACKETS"
	[GrammarRule("LEFT_BRACKETS")]
	private void mLEFT_BRACKETS()
	{
		EnterRule_LEFT_BRACKETS();
		EnterRule("LEFT_BRACKETS", 20);
		TraceIn("LEFT_BRACKETS", 20);
		try
		{
			int _type = LEFT_BRACKETS;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:37:15: ( '[' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:37:17: '['
			{
			DebugLocation(37, 17);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LEFT_BRACKETS", 20);
			LeaveRule("LEFT_BRACKETS", 20);
			LeaveRule_LEFT_BRACKETS();
		}
	}
	// $ANTLR end "LEFT_BRACKETS"

	partial void EnterRule_LEFT_CURLY_BRACKETS();
	partial void LeaveRule_LEFT_CURLY_BRACKETS();

	// $ANTLR start "LEFT_CURLY_BRACKETS"
	[GrammarRule("LEFT_CURLY_BRACKETS")]
	private void mLEFT_CURLY_BRACKETS()
	{
		EnterRule_LEFT_CURLY_BRACKETS();
		EnterRule("LEFT_CURLY_BRACKETS", 21);
		TraceIn("LEFT_CURLY_BRACKETS", 21);
		try
		{
			int _type = LEFT_CURLY_BRACKETS;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:38:21: ( '{' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:38:23: '{'
			{
			DebugLocation(38, 23);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LEFT_CURLY_BRACKETS", 21);
			LeaveRule("LEFT_CURLY_BRACKETS", 21);
			LeaveRule_LEFT_CURLY_BRACKETS();
		}
	}
	// $ANTLR end "LEFT_CURLY_BRACKETS"

	partial void EnterRule_LEFT_PARENTHESIS();
	partial void LeaveRule_LEFT_PARENTHESIS();

	// $ANTLR start "LEFT_PARENTHESIS"
	[GrammarRule("LEFT_PARENTHESIS")]
	private void mLEFT_PARENTHESIS()
	{
		EnterRule_LEFT_PARENTHESIS();
		EnterRule("LEFT_PARENTHESIS", 22);
		TraceIn("LEFT_PARENTHESIS", 22);
		try
		{
			int _type = LEFT_PARENTHESIS;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:39:18: ( '(' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:39:20: '('
			{
			DebugLocation(39, 20);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LEFT_PARENTHESIS", 22);
			LeaveRule("LEFT_PARENTHESIS", 22);
			LeaveRule_LEFT_PARENTHESIS();
		}
	}
	// $ANTLR end "LEFT_PARENTHESIS"

	partial void EnterRule_LESS_EQUAL_THAN();
	partial void LeaveRule_LESS_EQUAL_THAN();

	// $ANTLR start "LESS_EQUAL_THAN"
	[GrammarRule("LESS_EQUAL_THAN")]
	private void mLESS_EQUAL_THAN()
	{
		EnterRule_LESS_EQUAL_THAN();
		EnterRule("LESS_EQUAL_THAN", 23);
		TraceIn("LESS_EQUAL_THAN", 23);
		try
		{
			int _type = LESS_EQUAL_THAN;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:40:17: ( '<=' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:40:19: '<='
			{
			DebugLocation(40, 19);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LESS_EQUAL_THAN", 23);
			LeaveRule("LESS_EQUAL_THAN", 23);
			LeaveRule_LESS_EQUAL_THAN();
		}
	}
	// $ANTLR end "LESS_EQUAL_THAN"

	partial void EnterRule_LESS_THAN();
	partial void LeaveRule_LESS_THAN();

	// $ANTLR start "LESS_THAN"
	[GrammarRule("LESS_THAN")]
	private void mLESS_THAN()
	{
		EnterRule_LESS_THAN();
		EnterRule("LESS_THAN", 24);
		TraceIn("LESS_THAN", 24);
		try
		{
			int _type = LESS_THAN;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:41:11: ( '<' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:41:13: '<'
			{
			DebugLocation(41, 13);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LESS_THAN", 24);
			LeaveRule("LESS_THAN", 24);
			LeaveRule_LESS_THAN();
		}
	}
	// $ANTLR end "LESS_THAN"

	partial void EnterRule_LET();
	partial void LeaveRule_LET();

	// $ANTLR start "LET"
	[GrammarRule("LET")]
	private void mLET()
	{
		EnterRule_LET();
		EnterRule("LET", 25);
		TraceIn("LET", 25);
		try
		{
			int _type = LET;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:42:5: ( 'let' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:42:7: 'let'
			{
			DebugLocation(42, 7);
			Match("let"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LET", 25);
			LeaveRule("LET", 25);
			LeaveRule_LET();
		}
	}
	// $ANTLR end "LET"

	partial void EnterRule_MINUS();
	partial void LeaveRule_MINUS();

	// $ANTLR start "MINUS"
	[GrammarRule("MINUS")]
	private void mMINUS()
	{
		EnterRule_MINUS();
		EnterRule("MINUS", 26);
		TraceIn("MINUS", 26);
		try
		{
			int _type = MINUS;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:43:7: ( '-' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:43:9: '-'
			{
			DebugLocation(43, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINUS", 26);
			LeaveRule("MINUS", 26);
			LeaveRule_MINUS();
		}
	}
	// $ANTLR end "MINUS"

	partial void EnterRule_MULT();
	partial void LeaveRule_MULT();

	// $ANTLR start "MULT"
	[GrammarRule("MULT")]
	private void mMULT()
	{
		EnterRule_MULT();
		EnterRule("MULT", 27);
		TraceIn("MULT", 27);
		try
		{
			int _type = MULT;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:44:6: ( '*' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:44:8: '*'
			{
			DebugLocation(44, 8);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MULT", 27);
			LeaveRule("MULT", 27);
			LeaveRule_MULT();
		}
	}
	// $ANTLR end "MULT"

	partial void EnterRule_NIL();
	partial void LeaveRule_NIL();

	// $ANTLR start "NIL"
	[GrammarRule("NIL")]
	private void mNIL()
	{
		EnterRule_NIL();
		EnterRule("NIL", 28);
		TraceIn("NIL", 28);
		try
		{
			int _type = NIL;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:45:5: ( 'nil' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:45:7: 'nil'
			{
			DebugLocation(45, 7);
			Match("nil"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NIL", 28);
			LeaveRule("NIL", 28);
			LeaveRule_NIL();
		}
	}
	// $ANTLR end "NIL"

	partial void EnterRule_OF();
	partial void LeaveRule_OF();

	// $ANTLR start "OF"
	[GrammarRule("OF")]
	private void mOF()
	{
		EnterRule_OF();
		EnterRule("OF", 29);
		TraceIn("OF", 29);
		try
		{
			int _type = OF;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:46:4: ( 'of' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:46:6: 'of'
			{
			DebugLocation(46, 6);
			Match("of"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OF", 29);
			LeaveRule("OF", 29);
			LeaveRule_OF();
		}
	}
	// $ANTLR end "OF"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 30);
		TraceIn("OR", 30);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:47:4: ( '|' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:47:6: '|'
			{
			DebugLocation(47, 6);
			Match('|'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 30);
			LeaveRule("OR", 30);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_PLUS();
	partial void LeaveRule_PLUS();

	// $ANTLR start "PLUS"
	[GrammarRule("PLUS")]
	private void mPLUS()
	{
		EnterRule_PLUS();
		EnterRule("PLUS", 31);
		TraceIn("PLUS", 31);
		try
		{
			int _type = PLUS;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:48:6: ( '+' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:48:8: '+'
			{
			DebugLocation(48, 8);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PLUS", 31);
			LeaveRule("PLUS", 31);
			LeaveRule_PLUS();
		}
	}
	// $ANTLR end "PLUS"

	partial void EnterRule_QUOTES();
	partial void LeaveRule_QUOTES();

	// $ANTLR start "QUOTES"
	[GrammarRule("QUOTES")]
	private void mQUOTES()
	{
		EnterRule_QUOTES();
		EnterRule("QUOTES", 32);
		TraceIn("QUOTES", 32);
		try
		{
			int _type = QUOTES;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:49:8: ( '\"' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:49:10: '\"'
			{
			DebugLocation(49, 10);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("QUOTES", 32);
			LeaveRule("QUOTES", 32);
			LeaveRule_QUOTES();
		}
	}
	// $ANTLR end "QUOTES"

	partial void EnterRule_RIGHT_BRACKETS();
	partial void LeaveRule_RIGHT_BRACKETS();

	// $ANTLR start "RIGHT_BRACKETS"
	[GrammarRule("RIGHT_BRACKETS")]
	private void mRIGHT_BRACKETS()
	{
		EnterRule_RIGHT_BRACKETS();
		EnterRule("RIGHT_BRACKETS", 33);
		TraceIn("RIGHT_BRACKETS", 33);
		try
		{
			int _type = RIGHT_BRACKETS;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:50:16: ( ']' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:50:18: ']'
			{
			DebugLocation(50, 18);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RIGHT_BRACKETS", 33);
			LeaveRule("RIGHT_BRACKETS", 33);
			LeaveRule_RIGHT_BRACKETS();
		}
	}
	// $ANTLR end "RIGHT_BRACKETS"

	partial void EnterRule_RIGHT_CURLY_BRACKETS();
	partial void LeaveRule_RIGHT_CURLY_BRACKETS();

	// $ANTLR start "RIGHT_CURLY_BRACKETS"
	[GrammarRule("RIGHT_CURLY_BRACKETS")]
	private void mRIGHT_CURLY_BRACKETS()
	{
		EnterRule_RIGHT_CURLY_BRACKETS();
		EnterRule("RIGHT_CURLY_BRACKETS", 34);
		TraceIn("RIGHT_CURLY_BRACKETS", 34);
		try
		{
			int _type = RIGHT_CURLY_BRACKETS;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:51:22: ( '}' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:51:24: '}'
			{
			DebugLocation(51, 24);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RIGHT_CURLY_BRACKETS", 34);
			LeaveRule("RIGHT_CURLY_BRACKETS", 34);
			LeaveRule_RIGHT_CURLY_BRACKETS();
		}
	}
	// $ANTLR end "RIGHT_CURLY_BRACKETS"

	partial void EnterRule_RIGHT_PARENTHESIS();
	partial void LeaveRule_RIGHT_PARENTHESIS();

	// $ANTLR start "RIGHT_PARENTHESIS"
	[GrammarRule("RIGHT_PARENTHESIS")]
	private void mRIGHT_PARENTHESIS()
	{
		EnterRule_RIGHT_PARENTHESIS();
		EnterRule("RIGHT_PARENTHESIS", 35);
		TraceIn("RIGHT_PARENTHESIS", 35);
		try
		{
			int _type = RIGHT_PARENTHESIS;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:52:19: ( ')' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:52:21: ')'
			{
			DebugLocation(52, 21);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RIGHT_PARENTHESIS", 35);
			LeaveRule("RIGHT_PARENTHESIS", 35);
			LeaveRule_RIGHT_PARENTHESIS();
		}
	}
	// $ANTLR end "RIGHT_PARENTHESIS"

	partial void EnterRule_SEMICOLON();
	partial void LeaveRule_SEMICOLON();

	// $ANTLR start "SEMICOLON"
	[GrammarRule("SEMICOLON")]
	private void mSEMICOLON()
	{
		EnterRule_SEMICOLON();
		EnterRule("SEMICOLON", 36);
		TraceIn("SEMICOLON", 36);
		try
		{
			int _type = SEMICOLON;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:53:11: ( ';' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:53:13: ';'
			{
			DebugLocation(53, 13);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SEMICOLON", 36);
			LeaveRule("SEMICOLON", 36);
			LeaveRule_SEMICOLON();
		}
	}
	// $ANTLR end "SEMICOLON"

	partial void EnterRule_TEST();
	partial void LeaveRule_TEST();

	// $ANTLR start "TEST"
	[GrammarRule("TEST")]
	private void mTEST()
	{
		EnterRule_TEST();
		EnterRule("TEST", 37);
		TraceIn("TEST", 37);
		try
		{
			int _type = TEST;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:54:6: ( ']of' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:54:8: ']of'
			{
			DebugLocation(54, 8);
			Match("]of"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TEST", 37);
			LeaveRule("TEST", 37);
			LeaveRule_TEST();
		}
	}
	// $ANTLR end "TEST"

	partial void EnterRule_THEN();
	partial void LeaveRule_THEN();

	// $ANTLR start "THEN"
	[GrammarRule("THEN")]
	private void mTHEN()
	{
		EnterRule_THEN();
		EnterRule("THEN", 38);
		TraceIn("THEN", 38);
		try
		{
			int _type = THEN;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:55:6: ( 'then' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:55:8: 'then'
			{
			DebugLocation(55, 8);
			Match("then"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("THEN", 38);
			LeaveRule("THEN", 38);
			LeaveRule_THEN();
		}
	}
	// $ANTLR end "THEN"

	partial void EnterRule_TO();
	partial void LeaveRule_TO();

	// $ANTLR start "TO"
	[GrammarRule("TO")]
	private void mTO()
	{
		EnterRule_TO();
		EnterRule("TO", 39);
		TraceIn("TO", 39);
		try
		{
			int _type = TO;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:56:4: ( 'to' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:56:6: 'to'
			{
			DebugLocation(56, 6);
			Match("to"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TO", 39);
			LeaveRule("TO", 39);
			LeaveRule_TO();
		}
	}
	// $ANTLR end "TO"

	partial void EnterRule_TYPE();
	partial void LeaveRule_TYPE();

	// $ANTLR start "TYPE"
	[GrammarRule("TYPE")]
	private void mTYPE()
	{
		EnterRule_TYPE();
		EnterRule("TYPE", 40);
		TraceIn("TYPE", 40);
		try
		{
			int _type = TYPE;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:57:6: ( 'type' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:57:8: 'type'
			{
			DebugLocation(57, 8);
			Match("type"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TYPE", 40);
			LeaveRule("TYPE", 40);
			LeaveRule_TYPE();
		}
	}
	// $ANTLR end "TYPE"

	partial void EnterRule_VAR();
	partial void LeaveRule_VAR();

	// $ANTLR start "VAR"
	[GrammarRule("VAR")]
	private void mVAR()
	{
		EnterRule_VAR();
		EnterRule("VAR", 41);
		TraceIn("VAR", 41);
		try
		{
			int _type = VAR;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:58:5: ( 'var' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:58:7: 'var'
			{
			DebugLocation(58, 7);
			Match("var"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("VAR", 41);
			LeaveRule("VAR", 41);
			LeaveRule_VAR();
		}
	}
	// $ANTLR end "VAR"

	partial void EnterRule_WHILE();
	partial void LeaveRule_WHILE();

	// $ANTLR start "WHILE"
	[GrammarRule("WHILE")]
	private void mWHILE()
	{
		EnterRule_WHILE();
		EnterRule("WHILE", 42);
		TraceIn("WHILE", 42);
		try
		{
			int _type = WHILE;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:59:7: ( 'while' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:59:9: 'while'
			{
			DebugLocation(59, 9);
			Match("while"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHILE", 42);
			LeaveRule("WHILE", 42);
			LeaveRule_WHILE();
		}
	}
	// $ANTLR end "WHILE"

	partial void EnterRule_DIGIT();
	partial void LeaveRule_DIGIT();

	// $ANTLR start "DIGIT"
	[GrammarRule("DIGIT")]
	private void mDIGIT()
	{
		EnterRule_DIGIT();
		EnterRule("DIGIT", 43);
		TraceIn("DIGIT", 43);
		try
		{
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:131:7: ( '0' .. '9' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:
			{
			DebugLocation(131, 7);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("DIGIT", 43);
			LeaveRule("DIGIT", 43);
			LeaveRule_DIGIT();
		}
	}
	// $ANTLR end "DIGIT"

	partial void EnterRule_ASCII_CODE();
	partial void LeaveRule_ASCII_CODE();

	// $ANTLR start "ASCII_CODE"
	[GrammarRule("ASCII_CODE")]
	private void mASCII_CODE()
	{
		EnterRule_ASCII_CODE();
		EnterRule("ASCII_CODE", 44);
		TraceIn("ASCII_CODE", 44);
		try
		{
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:135:2: ( '0' DIGIT DIGIT | '1' ( ( '0' | '1' ) DIGIT | '2' '0' .. '7' ) )
			int alt2=2;
			try { DebugEnterDecision(2, false);
			int LA2_0 = input.LA(1);

			if ((LA2_0=='0'))
			{
				alt2 = 1;
			}
			else if ((LA2_0=='1'))
			{
				alt2 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:135:3: '0' DIGIT DIGIT
				{
				DebugLocation(135, 3);
				Match('0'); 
				DebugLocation(135, 7);
				mDIGIT(); 
				DebugLocation(135, 13);
				mDIGIT(); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:136:3: '1' ( ( '0' | '1' ) DIGIT | '2' '0' .. '7' )
				{
				DebugLocation(136, 3);
				Match('1'); 
				DebugLocation(136, 6);
				// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:136:6: ( ( '0' | '1' ) DIGIT | '2' '0' .. '7' )
				int alt1=2;
				try { DebugEnterSubRule(1);
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if (((LA1_0>='0' && LA1_0<='1')))
				{
					alt1 = 1;
				}
				else if ((LA1_0=='2'))
				{
					alt1 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:136:7: ( '0' | '1' ) DIGIT
					{
					DebugLocation(136, 7);
					input.Consume();

					DebugLocation(136, 16);
					mDIGIT(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:136:22: '2' '0' .. '7'
					{
					DebugLocation(136, 22);
					Match('2'); 
					DebugLocation(136, 26);
					MatchRange('0','7'); 

					}
					break;

				}
				} finally { DebugExitSubRule(1); }


				}
				break;

			}
		}
		finally
		{
			TraceOut("ASCII_CODE", 44);
			LeaveRule("ASCII_CODE", 44);
			LeaveRule_ASCII_CODE();
		}
	}
	// $ANTLR end "ASCII_CODE"

	partial void EnterRule_SCAPE();
	partial void LeaveRule_SCAPE();

	// $ANTLR start "SCAPE"
	[GrammarRule("SCAPE")]
	private void mSCAPE()
	{
		EnterRule_SCAPE();
		EnterRule("SCAPE", 45);
		TraceIn("SCAPE", 45);
		try
		{
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:139:7: ( '\\\\' ( 'n' | 't' | '\"' | '\\\\' | ASCII_CODE | ( WS )+ '\\\\' ) )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:139:8: '\\\\' ( 'n' | 't' | '\"' | '\\\\' | ASCII_CODE | ( WS )+ '\\\\' )
			{
			DebugLocation(139, 8);
			Match('\\'); 
			DebugLocation(139, 12);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:139:12: ( 'n' | 't' | '\"' | '\\\\' | ASCII_CODE | ( WS )+ '\\\\' )
			int alt4=6;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			switch (input.LA(1))
			{
			case 'n':
				{
				alt4 = 1;
				}
				break;
			case 't':
				{
				alt4 = 2;
				}
				break;
			case '\"':
				{
				alt4 = 3;
				}
				break;
			case '\\':
				{
				alt4 = 4;
				}
				break;
			case '0':
			case '1':
				{
				alt4 = 5;
				}
				break;
			case '\t':
			case '\n':
			case '\r':
			case ' ':
				{
				alt4 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:139:13: 'n'
				{
				DebugLocation(139, 13);
				Match('n'); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:139:17: 't'
				{
				DebugLocation(139, 17);
				Match('t'); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:139:21: '\"'
				{
				DebugLocation(139, 21);
				Match('\"'); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:139:25: '\\\\'
				{
				DebugLocation(139, 25);
				Match('\\'); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:139:30: ASCII_CODE
				{
				DebugLocation(139, 30);
				mASCII_CODE(); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:139:41: ( WS )+ '\\\\'
				{
				DebugLocation(139, 41);
				// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:139:41: ( WS )+
				int cnt3=0;
				try { DebugEnterSubRule(3);
				while (true)
				{
					int alt3=2;
					try { DebugEnterDecision(3, false);
					int LA3_0 = input.LA(1);

					if (((LA3_0>='\t' && LA3_0<='\n')||LA3_0=='\r'||LA3_0==' '))
					{
						alt3 = 1;
					}


					} finally { DebugExitDecision(3); }
					switch (alt3)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:
						{
						DebugLocation(139, 41);
						input.Consume();


						}
						break;

					default:
						if (cnt3 >= 1)
							goto loop3;

						EarlyExitException eee3 = new EarlyExitException( 3, input );
						DebugRecognitionException(eee3);
						throw eee3;
					}
					cnt3++;
				}
				loop3:
					;

				} finally { DebugExitSubRule(3); }

				DebugLocation(139, 44);
				Match('\\'); 

				}
				break;

			}
			} finally { DebugExitSubRule(4); }


			}

		}
		finally
		{
			TraceOut("SCAPE", 45);
			LeaveRule("SCAPE", 45);
			LeaveRule_SCAPE();
		}
	}
	// $ANTLR end "SCAPE"

	partial void EnterRule_LETTER();
	partial void LeaveRule_LETTER();

	// $ANTLR start "LETTER"
	[GrammarRule("LETTER")]
	private void mLETTER()
	{
		EnterRule_LETTER();
		EnterRule("LETTER", 46);
		TraceIn("LETTER", 46);
		try
		{
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:142:9: ( 'a' .. 'z' | 'A' .. 'Z' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:
			{
			DebugLocation(142, 9);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("LETTER", 46);
			LeaveRule("LETTER", 46);
			LeaveRule_LETTER();
		}
	}
	// $ANTLR end "LETTER"

	partial void EnterRule_ASCII_CHAR();
	partial void LeaveRule_ASCII_CHAR();

	// $ANTLR start "ASCII_CHAR"
	[GrammarRule("ASCII_CHAR")]
	private void mASCII_CHAR()
	{
		EnterRule_ASCII_CHAR();
		EnterRule("ASCII_CHAR", 47);
		TraceIn("ASCII_CHAR", 47);
		try
		{
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:145:12: ( ' ' | '!' | '#' .. '[' | ']' .. '~' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:
			{
			DebugLocation(145, 12);
			if ((input.LA(1)>=' ' && input.LA(1)<='!')||(input.LA(1)>='#' && input.LA(1)<='[')||(input.LA(1)>=']' && input.LA(1)<='~'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("ASCII_CHAR", 47);
			LeaveRule("ASCII_CHAR", 47);
			LeaveRule_ASCII_CHAR();
		}
	}
	// $ANTLR end "ASCII_CHAR"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 48);
		TraceIn("WS", 48);
		try
		{
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:148:5: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:
			{
			DebugLocation(148, 5);
			if ((input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\r'||input.LA(1)==' ')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("WS", 48);
			LeaveRule("WS", 48);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 49);
		TraceIn("COMMENT", 49);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:150:8: ( '/*' ( options {greedy=false; } : COMMENT | . )* '*/' )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:150:10: '/*' ( options {greedy=false; } : COMMENT | . )* '*/'
			{
			DebugLocation(150, 10);
			Match("/*"); 

			DebugLocation(150, 15);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:150:15: ( options {greedy=false; } : COMMENT | . )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=3;
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0=='*'))
				{
					int LA5_1 = input.LA(2);

					if ((LA5_1=='/'))
					{
						alt5 = 3;
					}
					else if (((LA5_1>='\u0000' && LA5_1<='.')||(LA5_1>='0' && LA5_1<='\uFFFF')))
					{
						alt5 = 2;
					}


				}
				else if ((LA5_0=='/'))
				{
					int LA5_2 = input.LA(2);

					if ((LA5_2=='*'))
					{
						alt5 = 1;
					}
					else if (((LA5_2>='\u0000' && LA5_2<=')')||(LA5_2>='+' && LA5_2<='\uFFFF')))
					{
						alt5 = 2;
					}


				}
				else if (((LA5_0>='\u0000' && LA5_0<=')')||(LA5_0>='+' && LA5_0<='.')||(LA5_0>='0' && LA5_0<='\uFFFF')))
				{
					alt5 = 2;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:150:43: COMMENT
					{
					DebugLocation(150, 43);
					mCOMMENT(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:150:53: .
					{
					DebugLocation(150, 53);
					MatchAny(); 

					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(150, 57);
			Match("*/"); 

			DebugLocation(150, 62);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 49);
			LeaveRule("COMMENT", 49);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 50);
		TraceIn("ID", 50);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:152:5: ( ( LETTER ) ( DIGIT | LETTER | '_' )* )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:152:7: ( LETTER ) ( DIGIT | LETTER | '_' )*
			{
			DebugLocation(152, 7);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(152, 15);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:152:15: ( DIGIT | LETTER | '_' )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if (((LA6_0>='0' && LA6_0<='9')||(LA6_0>='A' && LA6_0<='Z')||LA6_0=='_'||(LA6_0>='a' && LA6_0<='z')))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:
					{
					DebugLocation(152, 15);
					input.Consume();


					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 50);
			LeaveRule("ID", 50);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 51);
		TraceIn("INT", 51);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:154:6: ( ( DIGIT )+ )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:154:8: ( DIGIT )+
			{
			DebugLocation(154, 8);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:154:8: ( DIGIT )+
			int cnt7=0;
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if (((LA7_0>='0' && LA7_0<='9')))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:
					{
					DebugLocation(154, 8);
					input.Consume();


					}
					break;

				default:
					if (cnt7 >= 1)
						goto loop7;

					EarlyExitException eee7 = new EarlyExitException( 7, input );
					DebugRecognitionException(eee7);
					throw eee7;
				}
				cnt7++;
			}
			loop7:
				;

			} finally { DebugExitSubRule(7); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 51);
			LeaveRule("INT", 51);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 52);
		TraceIn("STRING", 52);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:156:9: ( QUOTES ( SCAPE | ASCII_CHAR )* QUOTES )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:156:11: QUOTES ( SCAPE | ASCII_CHAR )* QUOTES
			{
			DebugLocation(156, 11);
			mQUOTES(); 
			DebugLocation(156, 17);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:156:17: ( SCAPE | ASCII_CHAR )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=3;
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0=='\\'))
				{
					alt8 = 1;
				}
				else if (((LA8_0>=' ' && LA8_0<='!')||(LA8_0>='#' && LA8_0<='[')||(LA8_0>=']' && LA8_0<='~')))
				{
					alt8 = 2;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:156:18: SCAPE
					{
					DebugLocation(156, 18);
					mSCAPE(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:156:24: ASCII_CHAR
					{
					DebugLocation(156, 24);
					mASCII_CHAR(); 

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }

			DebugLocation(156, 36);
			mQUOTES(); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 52);
			LeaveRule("STRING", 52);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_WHITE_SPACES();
	partial void LeaveRule_WHITE_SPACES();

	// $ANTLR start "WHITE_SPACES"
	[GrammarRule("WHITE_SPACES")]
	private void mWHITE_SPACES()
	{
		EnterRule_WHITE_SPACES();
		EnterRule("WHITE_SPACES", 53);
		TraceIn("WHITE_SPACES", 53);
		try
		{
			int _type = WHITE_SPACES;
			int _channel = DefaultTokenChannel;
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:160:15: ( ( WS )+ )
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:160:17: ( WS )+
			{
			DebugLocation(160, 17);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:160:17: ( WS )+
			int cnt9=0;
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if (((LA9_0>='\t' && LA9_0<='\n')||LA9_0=='\r'||LA9_0==' '))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:
					{
					DebugLocation(160, 17);
					input.Consume();


					}
					break;

				default:
					if (cnt9 >= 1)
						goto loop9;

					EarlyExitException eee9 = new EarlyExitException( 9, input );
					DebugRecognitionException(eee9);
					throw eee9;
				}
				cnt9++;
			}
			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(160, 21);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHITE_SPACES", 53);
			LeaveRule("WHITE_SPACES", 53);
			LeaveRule_WHITE_SPACES();
		}
	}
	// $ANTLR end "WHITE_SPACES"

	public override void mTokens()
	{
		// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:8: ( AND | ARRAY | ASSIGN | BREAK | COLON | COMMA | DIFFERENT | DIV | DO | DOT | ELSE | END | EQUAL | FOR | FUNCTION | GREATER_EQUAL_THAN | GREATER_THAN | IF | IN | LEFT_BRACKETS | LEFT_CURLY_BRACKETS | LEFT_PARENTHESIS | LESS_EQUAL_THAN | LESS_THAN | LET | MINUS | MULT | NIL | OF | OR | PLUS | QUOTES | RIGHT_BRACKETS | RIGHT_CURLY_BRACKETS | RIGHT_PARENTHESIS | SEMICOLON | TEST | THEN | TO | TYPE | VAR | WHILE | COMMENT | ID | INT | STRING | WHITE_SPACES )
		int alt10=47;
		try { DebugEnterDecision(10, false);
		try
		{
			alt10 = dfa10.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(10); }
		switch (alt10)
		{
		case 1:
			DebugEnterAlt(1);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:10: AND
			{
			DebugLocation(1, 10);
			mAND(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:14: ARRAY
			{
			DebugLocation(1, 14);
			mARRAY(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:20: ASSIGN
			{
			DebugLocation(1, 20);
			mASSIGN(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:27: BREAK
			{
			DebugLocation(1, 27);
			mBREAK(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:33: COLON
			{
			DebugLocation(1, 33);
			mCOLON(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:39: COMMA
			{
			DebugLocation(1, 39);
			mCOMMA(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:45: DIFFERENT
			{
			DebugLocation(1, 45);
			mDIFFERENT(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:55: DIV
			{
			DebugLocation(1, 55);
			mDIV(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:59: DO
			{
			DebugLocation(1, 59);
			mDO(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:62: DOT
			{
			DebugLocation(1, 62);
			mDOT(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:66: ELSE
			{
			DebugLocation(1, 66);
			mELSE(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:71: END
			{
			DebugLocation(1, 71);
			mEND(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:75: EQUAL
			{
			DebugLocation(1, 75);
			mEQUAL(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:81: FOR
			{
			DebugLocation(1, 81);
			mFOR(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:85: FUNCTION
			{
			DebugLocation(1, 85);
			mFUNCTION(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:94: GREATER_EQUAL_THAN
			{
			DebugLocation(1, 94);
			mGREATER_EQUAL_THAN(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:113: GREATER_THAN
			{
			DebugLocation(1, 113);
			mGREATER_THAN(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:126: IF
			{
			DebugLocation(1, 126);
			mIF(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:129: IN
			{
			DebugLocation(1, 129);
			mIN(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:132: LEFT_BRACKETS
			{
			DebugLocation(1, 132);
			mLEFT_BRACKETS(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:146: LEFT_CURLY_BRACKETS
			{
			DebugLocation(1, 146);
			mLEFT_CURLY_BRACKETS(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:166: LEFT_PARENTHESIS
			{
			DebugLocation(1, 166);
			mLEFT_PARENTHESIS(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:183: LESS_EQUAL_THAN
			{
			DebugLocation(1, 183);
			mLESS_EQUAL_THAN(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:199: LESS_THAN
			{
			DebugLocation(1, 199);
			mLESS_THAN(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:209: LET
			{
			DebugLocation(1, 209);
			mLET(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:213: MINUS
			{
			DebugLocation(1, 213);
			mMINUS(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:219: MULT
			{
			DebugLocation(1, 219);
			mMULT(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:224: NIL
			{
			DebugLocation(1, 224);
			mNIL(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:228: OF
			{
			DebugLocation(1, 228);
			mOF(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:231: OR
			{
			DebugLocation(1, 231);
			mOR(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:234: PLUS
			{
			DebugLocation(1, 234);
			mPLUS(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:239: QUOTES
			{
			DebugLocation(1, 239);
			mQUOTES(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:246: RIGHT_BRACKETS
			{
			DebugLocation(1, 246);
			mRIGHT_BRACKETS(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:261: RIGHT_CURLY_BRACKETS
			{
			DebugLocation(1, 261);
			mRIGHT_CURLY_BRACKETS(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:282: RIGHT_PARENTHESIS
			{
			DebugLocation(1, 282);
			mRIGHT_PARENTHESIS(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:300: SEMICOLON
			{
			DebugLocation(1, 300);
			mSEMICOLON(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:310: TEST
			{
			DebugLocation(1, 310);
			mTEST(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:315: THEN
			{
			DebugLocation(1, 315);
			mTHEN(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:320: TO
			{
			DebugLocation(1, 320);
			mTO(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:323: TYPE
			{
			DebugLocation(1, 323);
			mTYPE(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:328: VAR
			{
			DebugLocation(1, 328);
			mVAR(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:332: WHILE
			{
			DebugLocation(1, 332);
			mWHILE(); 

			}
			break;
		case 43:
			DebugEnterAlt(43);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:338: COMMENT
			{
			DebugLocation(1, 338);
			mCOMMENT(); 

			}
			break;
		case 44:
			DebugEnterAlt(44);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:346: ID
			{
			DebugLocation(1, 346);
			mID(); 

			}
			break;
		case 45:
			DebugEnterAlt(45);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:349: INT
			{
			DebugLocation(1, 349);
			mINT(); 

			}
			break;
		case 46:
			DebugEnterAlt(46);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:353: STRING
			{
			DebugLocation(1, 353);
			mSTRING(); 

			}
			break;
		case 47:
			DebugEnterAlt(47);
			// D:\\College\\4to\\2do Semestre\\Complementos de Compilación\\Proyecto\\CODIGO\\Tiger\\Tiger\\ANTLR\\tiger.g:1:360: WHITE_SPACES
			{
			DebugLocation(1, 360);
			mWHITE_SPACES(); 

			}
			break;

		}

	}


	#region DFA
	DFA10 dfa10;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa10 = new DFA10(this);
	}

	private class DFA10 : DFA
	{
		private const string DFA10_eotS =
			"\x2\xFFFF\x1\x21\x1\x26\x1\x21\x1\xFFFF\x1\x2A\x1\x2C\x1\x21\x1\xFFFF"+
			"\x1\x21\x1\xFFFF\x1\x21\x1\x33\x1\x21\x3\xFFFF\x1\x21\x2\xFFFF\x2\x21"+
			"\x2\xFFFF\x1\x39\x1\x3C\x3\xFFFF\x3\x21\x3\xFFFF\x1\x21\x2\xFFFF\x1\x21"+
			"\x5\xFFFF\x1\x44\x4\x21\x2\xFFFF\x1\x49\x1\x4A\x2\x21\x1\x4D\x4\xFFFF"+
			"\x1\x21\x1\x4F\x5\x21\x1\xFFFF\x1\x21\x1\x56\x1\x57\x1\x21\x2\xFFFF\x1"+
			"\x59\x1\x5A\x1\xFFFF\x1\x21\x1\xFFFF\x1\x21\x1\x5D\x3\x21\x1\x61\x2\xFFFF"+
			"\x1\x21\x2\xFFFF\x1\x63\x1\x64\x1\xFFFF\x1\x21\x1\x66\x1\x67\x1\xFFFF"+
			"\x1\x21\x2\xFFFF\x1\x69\x2\xFFFF\x1\x21\x1\xFFFF\x1\x21\x1\x6C\x1\xFFFF";
		private const string DFA10_eofS =
			"\x6D\xFFFF";
		private const string DFA10_minS =
			"\x1\x9\x1\xFFFF\x1\x72\x1\x3D\x1\x72\x1\xFFFF\x1\x3D\x1\x2A\x1\x6F\x1"+
			"\xFFFF\x1\x6C\x1\xFFFF\x1\x6F\x1\x3D\x1\x66\x3\xFFFF\x1\x65\x2\xFFFF"+
			"\x1\x69\x1\x66\x2\xFFFF\x1\x20\x1\x6F\x3\xFFFF\x1\x68\x1\x61\x1\x68\x3"+
			"\xFFFF\x1\x72\x2\xFFFF\x1\x65\x5\xFFFF\x1\x30\x1\x73\x1\x64\x1\x72\x1"+
			"\x6E\x2\xFFFF\x2\x30\x1\x74\x1\x6C\x1\x30\x4\xFFFF\x1\x65\x1\x30\x1\x70"+
			"\x1\x72\x1\x69\x2\x61\x1\xFFFF\x1\x65\x2\x30\x1\x63\x2\xFFFF\x2\x30\x1"+
			"\xFFFF\x1\x6E\x1\xFFFF\x1\x65\x1\x30\x1\x6C\x1\x79\x1\x6B\x1\x30\x2\xFFFF"+
			"\x1\x74\x2\xFFFF\x2\x30\x1\xFFFF\x1\x65\x2\x30\x1\xFFFF\x1\x69\x2\xFFFF"+
			"\x1\x30\x2\xFFFF\x1\x6F\x1\xFFFF\x1\x6E\x1\x30\x1\xFFFF";
		private const string DFA10_maxS =
			"\x1\x7D\x1\xFFFF\x1\x72\x1\x3D\x1\x72\x1\xFFFF\x1\x3E\x1\x2A\x1\x6F\x1"+
			"\xFFFF\x1\x6E\x1\xFFFF\x1\x75\x1\x3D\x1\x6E\x3\xFFFF\x1\x65\x2\xFFFF"+
			"\x1\x69\x1\x66\x2\xFFFF\x1\x7E\x1\x6F\x3\xFFFF\x1\x79\x1\x61\x1\x68\x3"+
			"\xFFFF\x1\x72\x2\xFFFF\x1\x65\x5\xFFFF\x1\x7A\x1\x73\x1\x64\x1\x72\x1"+
			"\x6E\x2\xFFFF\x2\x7A\x1\x74\x1\x6C\x1\x7A\x4\xFFFF\x1\x65\x1\x7A\x1\x70"+
			"\x1\x72\x1\x69\x2\x61\x1\xFFFF\x1\x65\x2\x7A\x1\x63\x2\xFFFF\x2\x7A\x1"+
			"\xFFFF\x1\x6E\x1\xFFFF\x1\x65\x1\x7A\x1\x6C\x1\x79\x1\x6B\x1\x7A\x2\xFFFF"+
			"\x1\x74\x2\xFFFF\x2\x7A\x1\xFFFF\x1\x65\x2\x7A\x1\xFFFF\x1\x69\x2\xFFFF"+
			"\x1\x7A\x2\xFFFF\x1\x6F\x1\xFFFF\x1\x6E\x1\x7A\x1\xFFFF";
		private const string DFA10_acceptS =
			"\x1\xFFFF\x1\x1\x3\xFFFF\x1\x6\x3\xFFFF\x1\xA\x1\xFFFF\x1\xD\x3\xFFFF"+
			"\x1\x14\x1\x15\x1\x16\x1\xFFFF\x1\x1A\x1\x1B\x2\xFFFF\x1\x1E\x1\x1F\x2"+
			"\xFFFF\x1\x22\x1\x23\x1\x24\x3\xFFFF\x1\x2C\x1\x2D\x1\x2F\x1\xFFFF\x1"+
			"\x3\x1\x5\x1\xFFFF\x1\x7\x1\x17\x1\x18\x1\x2B\x1\x8\x5\xFFFF\x1\x10\x1"+
			"\x11\x5\xFFFF\x1\x20\x1\x2E\x1\x25\x1\x21\x7\xFFFF\x1\x9\x4\xFFFF\x1"+
			"\x12\x1\x13\x2\xFFFF\x1\x1D\x1\xFFFF\x1\x27\x6\xFFFF\x1\xC\x1\xE\x1\xFFFF"+
			"\x1\x19\x1\x1C\x2\xFFFF\x1\x29\x3\xFFFF\x1\xB\x1\xFFFF\x1\x26\x1\x28"+
			"\x1\xFFFF\x1\x2\x1\x4\x1\xFFFF\x1\x2A\x2\xFFFF\x1\xF";
		private const string DFA10_specialS =
			"\x6D\xFFFF}>";
		private static readonly string[] DFA10_transitionS =
			{
				"\x2\x23\x2\xFFFF\x1\x23\x12\xFFFF\x1\x23\x1\xFFFF\x1\x19\x3\xFFFF\x1"+
				"\x1\x1\xFFFF\x1\x11\x1\x1C\x1\x14\x1\x18\x1\x5\x1\x13\x1\x9\x1\x7\xA"+
				"\x22\x1\x3\x1\x1D\x1\x6\x1\xB\x1\xD\x2\xFFFF\x1A\x21\x1\xF\x1\xFFFF"+
				"\x1\x1A\x3\xFFFF\x1\x2\x1\x4\x1\x21\x1\x8\x1\xA\x1\xC\x2\x21\x1\xE\x2"+
				"\x21\x1\x12\x1\x21\x1\x15\x1\x16\x4\x21\x1\x1E\x1\x21\x1\x1F\x1\x20"+
				"\x3\x21\x1\x10\x1\x17\x1\x1B",
				"",
				"\x1\x24",
				"\x1\x25",
				"\x1\x27",
				"",
				"\x1\x29\x1\x28",
				"\x1\x2B",
				"\x1\x2D",
				"",
				"\x1\x2E\x1\xFFFF\x1\x2F",
				"",
				"\x1\x30\x5\xFFFF\x1\x31",
				"\x1\x32",
				"\x1\x34\x7\xFFFF\x1\x35",
				"",
				"",
				"",
				"\x1\x36",
				"",
				"",
				"\x1\x37",
				"\x1\x38",
				"",
				"",
				"\x5F\x3A",
				"\x1\x3B",
				"",
				"",
				"",
				"\x1\x3D\x6\xFFFF\x1\x3E\x9\xFFFF\x1\x3F",
				"\x1\x40",
				"\x1\x41",
				"",
				"",
				"",
				"\x1\x42",
				"",
				"",
				"\x1\x43",
				"",
				"",
				"",
				"",
				"",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\x1\x45",
				"\x1\x46",
				"\x1\x47",
				"\x1\x48",
				"",
				"",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\x1\x4B",
				"\x1\x4C",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"",
				"",
				"",
				"",
				"\x1\x4E",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\x1\x50",
				"\x1\x51",
				"\x1\x52",
				"\x1\x53",
				"\x1\x54",
				"",
				"\x1\x55",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\x1\x58",
				"",
				"",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"",
				"\x1\x5B",
				"",
				"\x1\x5C",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\x1\x5E",
				"\x1\x5F",
				"\x1\x60",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"",
				"",
				"\x1\x62",
				"",
				"",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"",
				"\x1\x65",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"",
				"\x1\x68",
				"",
				"",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"",
				"",
				"\x1\x6A",
				"",
				"\x1\x6B",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				""
			};

		private static readonly short[] DFA10_eot = DFA.UnpackEncodedString(DFA10_eotS);
		private static readonly short[] DFA10_eof = DFA.UnpackEncodedString(DFA10_eofS);
		private static readonly char[] DFA10_min = DFA.UnpackEncodedStringToUnsignedChars(DFA10_minS);
		private static readonly char[] DFA10_max = DFA.UnpackEncodedStringToUnsignedChars(DFA10_maxS);
		private static readonly short[] DFA10_accept = DFA.UnpackEncodedString(DFA10_acceptS);
		private static readonly short[] DFA10_special = DFA.UnpackEncodedString(DFA10_specialS);
		private static readonly short[][] DFA10_transition;

		static DFA10()
		{
			int numStates = DFA10_transitionS.Length;
			DFA10_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA10_transition[i] = DFA.UnpackEncodedString(DFA10_transitionS[i]);
			}
		}

		public DFA10( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 10;
			this.eot = DFA10_eot;
			this.eof = DFA10_eof;
			this.min = DFA10_min;
			this.max = DFA10_max;
			this.accept = DFA10_accept;
			this.special = DFA10_special;
			this.transition = DFA10_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( AND | ARRAY | ASSIGN | BREAK | COLON | COMMA | DIFFERENT | DIV | DO | DOT | ELSE | END | EQUAL | FOR | FUNCTION | GREATER_EQUAL_THAN | GREATER_THAN | IF | IN | LEFT_BRACKETS | LEFT_CURLY_BRACKETS | LEFT_PARENTHESIS | LESS_EQUAL_THAN | LESS_THAN | LET | MINUS | MULT | NIL | OF | OR | PLUS | QUOTES | RIGHT_BRACKETS | RIGHT_CURLY_BRACKETS | RIGHT_PARENTHESIS | SEMICOLON | TEST | THEN | TO | TYPE | VAR | WHILE | COMMENT | ID | INT | STRING | WHITE_SPACES );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace Tiger
